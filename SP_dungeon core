using System;
using System.Collections.Generic;
using System.Linq;

// --- 1. CharacterState 열거형 정의 ---
public enum CharacterState
{
    Idle,       // 대기 상태
}

// --- 2. ItemType 열거형 정의 (아이템 부위 구분을 위함) ---
public enum ItemType
{
    Weapon,
    Armor,
    Accessory,
}

// --- 3. Item 클래스 ---
public class Item
{
    public string Name { get; set; }
    public ItemType Type { get; set; }
    public int AttackBonus { get; set; }
    public int DefenseBonus { get; set; }
    public int HealthBonus { get; set; }
    public string Description { get; set; }
    public int Price { get; set; }
    public bool IsPurchased { get; set; }

    public Item(string name, ItemType type, int attackBonus, int defenseBonus, int healthBonus, string description, int price)
    {
        Name = name;
        Type = type;
        AttackBonus = attackBonus;
        DefenseBonus = defenseBonus;
        HealthBonus = healthBonus;
        Description = description;
        Price = price;
        IsPurchased = false;
    }
}

// --- 4. Character 클래스 ---
public class Character
{
    public int Level { get; set; } = 1;
    public string Name { get; set; } = "Chad";
    public string Job { get; set; } = "전사";
    public int BaseAttack { get; set; } = 10;
    public int BaseDefense { get; set; } = 5;
    public int BaseHealth { get; set; } = 100;
    public int Gold { get; set; } = 1500;
    public List<Item> Inventory { get; set; } = new List<Item>();
    public List<Item> EquippedItems { get; set; } = new List<Item>();

    public CharacterState CurrentState { get; set; }

    public Character()
    {
        CurrentState = CharacterState.Idle;
    }

    public void EquipItem(Item itemToEquip)
    {
        if (!Inventory.Contains(itemToEquip))
        {
            Console.WriteLine($"'{itemToEquip.Name}'은(는 인벤토리에 없습니다.");
            return;
        }

        if (EquippedItems.Contains(itemToEquip))
        {
            Console.WriteLine($"'{itemToEquip.Name}'은(는 이미 장착된 상태입니다.");
            return;
        }

        Item existingEquippedItem = EquippedItems.FirstOrDefault(i => i.Type == itemToEquip.Type);
        if (existingEquippedItem != null)
        {
            UnequipItem(existingEquippedItem);
        }

        EquippedItems.Add(itemToEquip);
        Console.WriteLine($"'{itemToEquip.Name}'을(를) 장착했습니다!");
    }

    public void UnequipItem(Item itemToUnequip)
    {
        if (!EquippedItems.Contains(itemToUnequip))
        {
            Console.WriteLine($"'{itemToUnequip.Name}'은(는 장착되어 있지 않습니다.");
            return;
        }

        EquippedItems.Remove(itemToUnequip);
        Console.WriteLine($"'{itemToUnequip.Name}'을(를) 해제했습니다!");
    }

    public int GetCurrentAttack()
    {
        return BaseAttack + EquippedItems.Sum(item => item.AttackBonus);
    }

    public int GetCurrentDefense()
    {
        return BaseDefense + EquippedItems.Sum(item => item.DefenseBonus);
    }

    public int GetCurrentHealth()
    {
        return BaseHealth + EquippedItems.Sum(item => item.HealthBonus);
    }

    public void SetCharacterState(CharacterState newState)
    {
        if (CurrentState == newState)
        {
            Console.WriteLine($"현재 상태가 이미 {newState}입니다. (변경 불필요)");
            return;
        }
        Console.WriteLine($"캐릭터 상태 변경: {CurrentState} -> {newState}");
        CurrentState = newState;
    }
}

// --- 5. Program 클래스 (메인 게임 로직) ---
class Program
{
    static Character player = new Character();
    static List<Item> shopItems = new List<Item>
    {
        new Item("수련자 갑옷", ItemType.Armor, 0, 5, 10, "수련에 도움을 주는 갑옷입니다.", 0),
        new Item("무쇠갑옷", ItemType.Armor, 0, 9, 20, "무쇠로 만들어진 흔한 갑옷입니다.", 1500),
        new Item("스파르타의 갑옷", ItemType.Armor, 0, 15, 50, "스파르타의 전사들이 사용했다는 전설의 갑옷입니다.", 13500),
        new Item("낡은 검", ItemType.Weapon, 2, 0, 0, "오래된 낡은 검 입니다.", 0),
        new Item("청동 도끼", ItemType.Weapon, 5, 0, 0, "관리가 잘된 청동 도끼입니다.", 1500),
        new Item("스파르타의 창", ItemType.Weapon, 7, 0, 0, "스파르타의 전사들이 사용했다는 전설의 창입니다.", 135000)
    };

    static string townName = "스파르타";

    static void Main(string[] args)
    {
        foreach (var item in shopItems)
        {
            if (item.Price == 0)
            {
                item.IsPurchased = true;
                player.Inventory.Add(item);
            }
        }

        Item initialArmor = player.Inventory.FirstOrDefault(item => item.Name == "수련자 갑옷");
        if (initialArmor != null)
        {
            player.EquipItem(initialArmor);
        }
        Item initialWeapon = player.Inventory.FirstOrDefault(item => item.Name == "낡은 검");
        if (initialWeapon != null)
        {
            player.EquipItem(initialWeapon);
        }

        SetTownName();

        while (true)
        {
            DisplayMainMenu();
        }
    }

    static void SetTownName()
    {
        Console.Clear();
        Console.WriteLine("마을 이름을 설정해주세요:");
        Console.Write(">> ");
        string input = Console.ReadLine();
        if (!string.IsNullOrWhiteSpace(input))
        {
            townName = input;
            Console.WriteLine($"마을 이름이 '{townName}'으로 설정되었습니다.");
        }
        else
        {
            Console.WriteLine($"유효한 마을 이름이 입력되지 않아 기본 이름인 '{townName}'이(가) 사용됩니다.");
        }
        Console.WriteLine("계속하려면 아무 키나 누르세요...");
        Console.ReadKey();
    }

    static void DisplayMainMenu()
    {
        Console.Clear();
        Console.WriteLine($"{townName} 마을에 오신 여러분 환영합니다.");
        Console.WriteLine("이곳에서 던전으로 들어가기전 활동을 할 수 있습니다.");
        Console.WriteLine();
        Console.WriteLine("1. 상태 보기");
        Console.WriteLine("2. 인벤토리");
        Console.WriteLine("3. 상점");
        Console.WriteLine("0. 게임 종료");
        Console.WriteLine();
        Console.Write("원하시는 행동을 입력해주세요.\n>> ");

        string input = Console.ReadLine();
        switch (input)
        {
            case "1": DisplayStatus(); break;
            case "2": DisplayInventory(); break;
            case "3": DisplayShop(); break;
            case "0": Environment.Exit(0); break;
            default: Console.WriteLine("잘못된 입력입니다."); Console.ReadLine(); break;
        }
    }

    static void DisplayStatus()
    {
        Console.Clear();
        Console.WriteLine("상태 보기");
        Console.WriteLine("캐릭터의 정보가 표시됩니다.");
        Console.WriteLine();
        Console.WriteLine($"Lv. {player.Level:D2}");
        Console.WriteLine($"{player.Name} ( {player.Job} )");

        int totalAttack = player.GetCurrentAttack();
        int attackBonus = player.EquippedItems.Sum(item => item.AttackBonus);
        int totalDefense = player.GetCurrentDefense();
        int defenseBonus = player.EquippedItems.Sum(item => item.DefenseBonus);
        int totalHealth = player.GetCurrentHealth();
        int healthBonus = player.EquippedItems.Sum(item => item.HealthBonus);

        Console.WriteLine($"공격력 : {totalAttack} {(attackBonus > 0 ? $"(+{attackBonus})" : "")}");
        Console.WriteLine($"방어력 : {totalDefense} {(defenseBonus > 0 ? $"(+{defenseBonus})" : "")}");
        Console.WriteLine($"체 력 : {totalHealth} {(healthBonus > 0 ? $"(+{healthBonus})" : "")}");
        Console.WriteLine($"Gold : {player.Gold} G");
        Console.WriteLine($"현재 행동 상태: {player.CurrentState}");
        Console.WriteLine();
        Console.WriteLine("0. 나가기");
        Console.WriteLine();
        Console.Write("원하시는 행동을 입력해주세요.\n>> ");

        string input = Console.ReadLine();
        if (input != "0") Console.WriteLine("잘못된 입력입니다.");
        Console.WriteLine("아무 키나 눌러 계속하세요...");
        Console.ReadLine();
    }

    static void DisplayInventory()
    {
        while (true)
        {
            Console.Clear();
            Console.WriteLine("인벤토리");
            Console.WriteLine("보유 중인 아이템을 관리할 수 있습니다.");
            Console.WriteLine();
            Console.WriteLine("[아이템 목록]");

            if (player.Inventory.Count == 0)
            {
                Console.WriteLine("보유한 아이템이 없습니다.");
            }
            else
            {
                for (int i = 0; i < player.Inventory.Count; i++)
                {
                    Item item = player.Inventory[i];
                    string equippedStatus = player.EquippedItems.Contains(item) ? "[E]" : "";
                    string bonus = "";
                    if (item.AttackBonus > 0) bonus = $"공격력 +{item.AttackBonus}";
                    else if (item.DefenseBonus > 0) bonus = $"방어력 +{item.DefenseBonus}";
                    else if (item.HealthBonus > 0) bonus = $"체력 +{item.HealthBonus}";

                    // 인벤토리 목록 줄 맞춤
                    Console.WriteLine($"{i + 1,-3} {equippedStatus}{item.Name,-15} | {bonus,-15} | {item.Description}");
                }
            }

            Console.WriteLine();
            Console.WriteLine("1. 장착/해제 관리");
            Console.WriteLine("0. 나가기");
            Console.WriteLine();
            Console.Write("원하시는 행동을 입력해주세요.\n>> ");

            string input = Console.ReadLine();
            if (input == "1")
            {
                DisplayEquipManagement();
            }
            else if (input == "0")
            {
                break;
            }
            else
            {
                Console.WriteLine("잘못된 입력입니다.");
                Console.WriteLine("아무 키나 눌러 계속하세요...");
                Console.ReadLine();
            }
        }
    }

    static void DisplayEquipManagement()
    {
        while (true)
        {
            Console.Clear();
            Console.WriteLine("인벤토리 - 장착 관리");
            Console.WriteLine("원하는 아이템을 선택하여 장착하거나 해제할 수 있습니다.");
            Console.WriteLine();
            Console.WriteLine("[아이템 목록]");

            if (player.Inventory.Count == 0)
            {
                Console.WriteLine("보유한 아이템이 없습니다.");
                Console.WriteLine("\n아무 키나 눌러 계속하세요...");
                Console.ReadLine();
                return;
            }

            for (int i = 0; i < player.Inventory.Count; i++)
            {
                Item item = player.Inventory[i];
                string equippedStatus = player.EquippedItems.Contains(item) ? "[E]" : "";
                string bonus = "";
                if (item.AttackBonus > 0) bonus = $"공격력 +{item.AttackBonus}";
                else if (item.DefenseBonus > 0) bonus = $"방어력 +{item.DefenseBonus}";
                else if (item.HealthBonus > 0) bonus = $"체력 +{item.HealthBonus}";

                // 장착 관리 목록 줄 맞춤
                Console.WriteLine($"{i + 1,-3} {equippedStatus}{item.Name,-15} | {bonus,-15} | {item.Description}");
            }
            Console.WriteLine();
            Console.WriteLine("0. 나가기");
            Console.WriteLine();
            Console.Write("장착/해제할 아이템 번호를 입력해주세요.\n>> ");

            string input = Console.ReadLine();
            if (input == "0")
            {
                break;
            }

            if (int.TryParse(input, out int choice) && choice >= 1 && choice <= player.Inventory.Count)
            {
                Item selectedItem = player.Inventory[choice - 1];

                Console.WriteLine($"\n'{selectedItem.Name}'을(를) 어떻게 하시겠습니까?");
                Console.WriteLine("1. 장착");
                Console.WriteLine("2. 해제");
                Console.WriteLine("0. 뒤로가기");
                Console.Write(">> ");
                string actionInput = Console.ReadLine();

                switch (actionInput)
                {
                    case "1":
                        player.EquipItem(selectedItem);
                        break;
                    case "2":
                        player.UnequipItem(selectedItem);
                        break;
                    case "0":
                        Console.WriteLine("이전 메뉴로 돌아갑니다.");
                        break;
                    default:
                        Console.WriteLine("잘못된 입력입니다.");
                        break;
                }
                Console.WriteLine("\n아무 키나 눌러 계속하세요...");
                Console.ReadLine();
            }
            else
            {
                Console.WriteLine("잘못된 번호입니다.");
                Console.WriteLine("아무 키나 눌러 계속하세요...");
                Console.ReadLine();
            }
        }
    }

    static void DisplayShop()
    {
        while (true)
        {
            Console.Clear();
            Console.WriteLine("상점");
            Console.WriteLine("필요한 아이템을 얻을 수 있는 상점입니다.");
            Console.WriteLine();
            Console.WriteLine($"[보유 골드]\n{player.Gold} G");
            Console.WriteLine();
            Console.WriteLine("[아이템 목록]");
            for (int i = 0; i < shopItems.Count; i++)
            {
                var item = shopItems[i];
                string bonus = "";
                if (item.AttackBonus > 0) bonus = $"공격력 +{item.AttackBonus}";
                else if (item.DefenseBonus > 0) bonus = $"방어력 +{item.DefenseBonus}";
                else if (item.HealthBonus > 0) bonus = $"체력 +{item.HealthBonus}";

                // 상점 목록 줄 맞춤
                Console.WriteLine($"- {i + 1,-3} {item.Name,-15} | {bonus,-15} | {item.Description,-35} | {(item.IsPurchased ? "구매완료" : $"{item.Price} G")}");
            }
            Console.WriteLine();
            Console.WriteLine("1. 아이템 구매");
            Console.WriteLine("0. 나가기");
            Console.WriteLine();
            Console.Write("원하시는 행동을 입력해주세요.\n>> ");

            string input = Console.ReadLine();
            if (input == "1") DisplayPurchaseMenu();
            else if (input == "0") break;
            else { Console.WriteLine("잘못된 입력입니다."); Console.ReadLine(); }
        }
    }

    static void DisplayPurchaseMenu()
    {
        while (true)
        {
            Console.Clear();
            Console.WriteLine("상점 - 아이템 구매");
            Console.WriteLine("필요한 아이템을 얻을 수 있는 상점입니다.");
            Console.WriteLine();
            Console.WriteLine($"[보유 골드]\n{player.Gold} G");
            Console.WriteLine();
            Console.WriteLine("[아이템 목록]");
            for (int i = 0; i < shopItems.Count; i++)
            {
                var item = shopItems[i];
                string bonus = "";
                if (item.AttackBonus > 0) bonus = $"공격력 +{item.AttackBonus}";
                else if (item.DefenseBonus > 0) bonus = $"방어력 +{item.DefenseBonus}";
                else if (item.HealthBonus > 0) bonus = $"체력 +{item.HealthBonus}";

                // 구매 메뉴 목록 줄 맞춤
                Console.WriteLine($"- {i + 1,-3} {item.Name,-15} | {bonus,-15} | {item.Description,-35} | {(item.IsPurchased ? "구매완료" : $"{item.Price} G")}");
            }
            Console.WriteLine();
            Console.WriteLine("0. 나가기");
            Console.WriteLine();
            Console.Write("원하시는 행동을 입력해주세요.\n>> ");

            string input = Console.ReadLine();
            if (input == "0") break;
            if (int.TryParse(input, out int index) && index >= 1 && index <= shopItems.Count)
            {
                var item = shopItems[index - 1];
                if (item.IsPurchased)
                {
                    Console.WriteLine("이미 구매한 아이템입니다.");
                }
                else if (player.Gold >= item.Price)
                {
                    player.Gold -= item.Price;
                    item.IsPurchased = true;
                    player.Inventory.Add(item);
                    Console.WriteLine("구매를 완료했습니다.");
                }
                else
                {
                    Console.WriteLine("Gold 가 부족합니다.");
                }
            }
            else
            {
                Console.WriteLine("잘못된 입력입니다.");
            }
            Console.ReadLine();
        }
    }
}
